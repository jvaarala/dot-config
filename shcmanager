# --------------------------
# Load configuration
config_file=".shcmanager.config"
work_dir=""
plugin_dir=""

if [ -f "$config_file" ]; then
  while IFS='=' read -r key value; do
    if [ "$key" = "WORK_DIR" ]; then
      work_dir=$(eval echo "$value")
      break
    fi
  done <"$config_file"
else
  echo "Config file not found!"
  read -p "Press Enter to continue..."
fi

if [ -n "$work_dir" ]; then
  plugin_dir="$work_dir/plugins"
else
  echo "WORK_DIR not found in config file!"
  read -p "Press Enter to continue..."
fi

# --------------------------
# Actual script starts here
if [ $# -ne 0 ] && [ "$1" != "create" ]; then
  echo "Usage: $0 [create <plugin_name>]"
  exit 1
elif [ "$1" = "create" ] && [ $# -ne 2 ]; then
  echo "Usage: $0 [create <plugin_name>]"
  exit 1
elif [ "$1" = "create" ]; then

  input_string="$2"
  filename=$(echo "$input_string" | tr ' ' '_')
  file_path="$plugin_dir/$filename"

  cat <<EOL >"$file_path"
install_$filename() {
  echo "Installing $filename..."
}

uninstall_$filename() {
  echo "Uninstalling $filename..."
}
EOL

  echo "Plugin template created at $file_path"
  exit 1
fi

# --------------------------
# Load "plugins"
options=()
for file in "$plugin_dir"/*; do
  if [ -f "$file" ]; then
    # shellcheck source=./plugins
    source "$file"
    filename=$(basename "$file")
    options+=("${filename%.*}")
  fi
done

# --------------------------
# Menu

selectedForInstall=()
selectedForUninstall=()

cursorIndex=0

display_menu() {
  clear
  echo ""
  for index in "${!options[@]}"; do
    selectedForInstall_contains=false
    selectedForUninstall_contains=false
    for s in "${selectedForInstall[@]}"; do
      if [[ "$s" =~ ^[0-9]+$ ]] && [ "$s" -eq "$index" ]; then
        selectedForInstall_contains=true
        break
      fi
    done
    for s in "${selectedForUninstall[@]}"; do
      if [[ "$s" =~ ^[0-9]+$ ]] && [ "$s" -eq "$index" ]; then
        selectedForUninstall_contains=true
        break
      fi
    done

    if [ "$index" -eq "$cursorIndex" ]; then
      if $selectedForInstall_contains; then
        final_string="  > \033[1;32m${options[index]}\033[0m"
      elif $selectedForUninstall_contains; then
        final_string="  > \033[1;31m${options[index]}\033[0m"
      else
        final_string="  > ${options[index]}"
      fi
    else
      if $selectedForInstall_contains; then
        final_string="  \033[1;32m  ${options[index]}\033[0m"
      elif $selectedForUninstall_contains; then
        final_string="  \033[1;31m  ${options[index]}\033[0m"
      else
        final_string="    ${options[index]}"
      fi
    fi

    echo "${final_string//_/ }"

  done

  echo ""
  echo "   [k] up  [l] down  [i] select [u] uninstall  [q] quit  [enter] confirm"
}

while true; do
  display_menu

  read -rsn1 key
  case "$key" in
  'q')
    exit 0
    ;;

  # k - move cursor up
  k)
    ((cursorIndex--))
    if ((cursorIndex < 0)); then
      cursorIndex=$((${#options[@]} - 1))
    fi
    ;;

  # l - move cursor down
  l)
    ((cursorIndex++))
    if ((cursorIndex >= ${#options[@]})); then
      cursorIndex=0
    fi
    ;;

  # i - select option
  i)
    selectedForInstall_contains=false
    for s in "${selectedForInstall[@]}"; do
      if [[ "$s" -eq "$cursorIndex" ]]; then
        selectedForInstall_contains=true
        break
      fi
    done

    if $selectedForInstall_contains; then
      # Remove from the selectedForInstall array
      selectedForInstall=("${selectedForInstall[@]/$cursorIndex/}")
    else
      # Add to the selectedForInstall array
      selectedForInstall+=("$cursorIndex")
      # Remove from the selectedForUninstall array if present
      selectedForUninstall=("${selectedForUninstall[@]/$cursorIndex/}")
    fi

    # Filter out empty elements
    filtered_selectedForInstall=()
    for s in "${selectedForInstall[@]}"; do
      if [[ -n "$s" ]]; then
        filtered_selectedForInstall+=("$s")
      fi
    done
    selectedForInstall=("${filtered_selectedForInstall[@]}")
    ;;

  # u - select option
  u)
    selectedForUninstall_contains=false
    for s in "${selectedForUninstall[@]}"; do
      if [[ "$s" -eq "$cursorIndex" ]]; then
        selectedForUninstall_contains=true
        break
      fi
    done

    if $selectedForUninstall_contains; then
      # Remove from the selectedForUninstall array
      selectedForUninstall=("${selectedForUninstall[@]/$cursorIndex/}")
    else
      # Add to the selectedForUninstall array
      selectedForUninstall+=("$cursorIndex")
      # Remove from the selectedForInstall array if present
      selectedForInstall=("${selectedForInstall[@]/$cursorIndex/}")
    fi

    # Filter out empty elements
    filtered_selectedForUninstall=()
    for s in "${selectedForUninstall[@]}"; do
      if [[ -n "$s" ]]; then
        filtered_selectedForUninstall+=("$s")
      fi
    done
    selectedForUninstall=("${filtered_selectedForUninstall[@]}")
    ;;

    # Enter to confirm selection
  "")
    break
    ;;
  *) ;;

  esac
done

# Sort the arrays in same order as the options array
sorted_selectedForInstall=()
for i in "${!options[@]}"; do
  for j in "${selectedForInstall[@]}"; do
    if [[ "$i" -eq "$j" ]]; then
      sorted_selectedForInstall+=("$i")
    fi
  done
done

sorted_selectedForUninstall=()
for i in "${!options[@]}"; do
  for j in "${selectedForUninstall[@]}"; do
    if [[ "$i" -eq "$j" ]]; then
      sorted_selectedForUninstall+=("$i")
    fi
  done
done

# --------------------------
# Install and uninstall
for i in "${sorted_selectedForInstall[@]}"; do
  function_name="install_${options[i]}"
  if declare -f "$function_name" >/dev/null; then
    eval "$function_name"
  else
    echo "Function $function_name not found"
  fi
done

for i in "${sorted_selectedForUninstall[@]}"; do
  function_name="uninstall_${options[i]}"
  if declare -f "$function_name" >/dev/null; then
    eval "$function_name"
  else
    echo "Function $function_name not found"
  fi
done

echo ""
echo "ðŸŽ‰ It's all shcmanaged!"
echo ""
